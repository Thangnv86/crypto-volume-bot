import asyncio
import time
import os
from telegram import Bot
import requests
import json
from datetime import datetime, timedelta

# C·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BOT_TOKEN = os.getenv('BOT_TOKEN', '8457652233:AAHGXyZULA63uRK8qZvkhkFeu7vA1-LHryo')
CHAT_ID = os.getenv('CHAT_ID', '-4611492878')
TIMEFRAME = '4h'  # Khung th·ªùi gian 4 gi·ªù
CHECK_INTERVAL = 900  # 15 ph√∫t
NUM_PREV_CANDLES = 10
SPIKE_MULTIPLIER = 2
MAX_SYMBOLS = 100

# Kh·ªüi t·∫°o Bot
telegram_bot = Bot(token=BOT_TOKEN)
print("Bot kh·ªüi ƒë·ªông...")

# H√†m t√≠nh trung b√¨nh
def mean(numbers):
    return sum(numbers) / len(numbers) if numbers else 0

# L·∫•y danh s√°ch top 1000 coins t·ª´ CoinGecko
def get_top_coins():
    url = 'https://api.coingecko.com/api/v3/coins/markets'
    params = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': 1000,
        'page': 1,
        'sparkline': False
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        return [coin['id'] for coin in data]  # S·ª≠ d·ª•ng 'id' c·ªßa CoinGecko
    except Exception as e:
        print(f"L·ªói CoinGecko (l·∫•y danh s√°ch): {e}")
        return []

# L·∫•y d·ªØ li·ªáu volume l·ªãch s·ª≠ t·ª´ CoinGecko
def get_coin_volume_history(coin_id):
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(hours=NUM_PREV_CANDLES * 4)  # 10 n·∫øn x 4h
    params = {
        'vs_currency': 'usd',
        'days': (end_time - start_time).days + 1,
        'interval': 'hourly'
    }
    url = f'https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart'
    try:
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        # L·∫•y volume t·ª´ d·ªØ li·ªáu (gi·∫£ ƒë·ªãnh d·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ tr∆∞·ªùng 'total_volumes')
        volumes = [entry[1] for entry in data.get('total_volumes', [])[-NUM_PREV_CANDLES-1:]]  # L·∫•y 11 gi√° tr·ªã cu·ªëi (10 tr∆∞·ªõc + hi·ªán t·∫°i)
        return volumes
    except Exception as e:
        print(f"L·ªói CoinGecko (l·∫•y volume {coin_id}): {e}")
        return []

# L·ªçc symbols v√† √°nh x·∫° v·ªõi CoinGecko
def get_tracked_coins():
    cache_file = 'coins.json'
    if os.path.exists(cache_file):
        try:
            with open(cache_file, 'r') as f:
                tracked = json.load(f)
                print(f"T·∫£i {len(tracked)} coins t·ª´ cache.")
                return tracked[:MAX_SYMBOLS]
        except:
            pass
    
    top_coins = get_top_coins()
    tracked = top_coins[:MAX_SYMBOLS]  # L·∫•y top 100 coins
    try:
        with open(cache_file, 'w') as f:
            json.dump(tracked, f)
    except Exception as e:
        print(f"L·ªói l∆∞u cache: {e}")
    print(f"Theo d√µi {len(tracked)} coins.")
    return tracked

# Ki·ªÉm tra volume spike
def check_volume_spike(coin_id):
    try:
        volumes = get_coin_volume_history(coin_id)
        if len(volumes) < NUM_PREV_CANDLES + 1:
            print(f"D·ªØ li·ªáu volume kh√¥ng ƒë·ªß cho {coin_id}")
            return False, 0
        prev_volumes = volumes[:-1]  # 10 n·∫øn tr∆∞·ªõc
        current_volume = volumes[-1]  # N·∫øn hi·ªán t·∫°i
        avg_prev = mean(prev_volumes)
        if current_volume > SPIKE_MULTIPLIER * avg_prev:
            ratio = current_volume / avg_prev
            return True, ratio
        return False, 0
    except Exception as e:
        print(f"L·ªói ki·ªÉm tra {coin_id}: {e}")
        return False, 0

# G·ª≠i alert
async def send_alert(message):
    try:
        await telegram_bot.send_message(chat_id=CHAT_ID, text=message)
        print("Alert sent!")
    except Exception as e:
        print(f"L·ªói g·ª≠i alert: {e}")

# Main loop
async def main():
    print("Bot ƒëang ch·∫°y...")
    while True:
        coins = get_tracked_coins()
        for coin_id in coins:
            is_spike, ratio = check_volume_spike(coin_id)
            if is_spike:
                message = (
                    f"üö® VOLUME SPIKE ALERT!\n"
                    f"Coin: {coin_id}\n"
                    f"Volume g·∫•p {ratio:.2f}x trung b√¨nh 10 n·∫øn H4 (CoinGecko).\n"
                    f"Ki·ªÉm tra th√™m tr√™n CoinGecko!"
                )
                await send_alert(message)
                time.sleep(1)
            time.sleep(0.2)
        print(f"Ho√†n th√†nh ki·ªÉm tra {len(coins)} coins, ch·ªù {CHECK_INTERVAL/60} ph√∫t...")
        await asyncio.sleep(CHECK_INTERVAL)

if __name__ == '__main__':
    asyncio.run(main())
